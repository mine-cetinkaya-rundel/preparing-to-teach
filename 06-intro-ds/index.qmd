---
title: "Teaching intro data science and assessing learning"
subtitle: "Preparing to Teach 2023"
author: "Mine Çetinkaya-Rundel"
footer: "[🔗 preparingtoteach.org](https://preparingtoteach.org)"
format: 
  revealjs:
    theme: slides.scss
    multiplex: true
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
execute:
  freeze: auto
  echo: true
knitr:
  opts_chunk: 
    R.options:
      width: 200
---

```{r}
#| include: false

library(unvotes)
library(tidyverse)
library(openintro)
library(countdown)
library(infer)
```

# About me

## My teaching background

-   PhD at UCLA: Lots of intro stat TAing, found a passion for thinking about how people learn and how to better meet their needs

-   Faculty at Duke:

    -   First 3 years: Focus on intro stat, focusing on infusing modern methods and computing into the curriculum

    -   4th year onward (including 2 year stint at University of Edinburgh): Focus on intro data science and tool building *(but still actively thinking about intro stat too...)*

# Principles for design

## Baking a cake {.center}

Imagine you're new to baking, and you're in a baking class.
I'm going to present two options for starting the class.
Which one gives you **better sense** of the final product?

## Baking a cake

::: columns
::: {.column width="50%"}
Today we're going to make a pineapple and coconut sandwich sponge cake with these ingredients
:::

::: {.column width="50%"}
![](images/cake-ingredients.png)
:::
:::

## Baking a cake

::: columns
::: {.column width="50%"}
Today we're going to make a pineapple and coconut sandwich sponge cake with these ingredients
:::

::: {.column width="50%"}
![](images/cake-result.png)
:::
:::

## OK, hold on to that thought! {.center}

## Design foundation 1: Backwards design

Set goals for educational curriculum before choosing instructional methods + forms of assessment

1.  Identify desired results
2.  Determine acceptable evidence
3.  Plan learning experiences and instruction

::: aside
Wiggins, Grant P., Grant Wiggins, and Jay McTighe. 
Understanding by design.
Ascd, 2005.
:::

## Designing backwards

::: incremental
1.  Identify desired **data analysis** results
2.  Determine **building blocks**
3.  Plan learning experiences and instruction
:::

## Design foundation 2: GAISE {.small}

2016 Guidelines for Assessment and Instruction in Statistics Education

1.  Teach statistical thinking.
    -   Teach statistics as an investigative process of problem-solving and decision making.

    -   Give students experience with multivariable thinking \[...\] to answer challenging questions that require them to investigate and explore relationships among many variables.

<!-- -->

2.  Focus on conceptual understanding.
3.  Integrate real data with a context and purpose.
4.  Foster active learning.
5.  Use technology to explore concepts and analyse data.
6.  Use assessments to improve and evaluate student learning.

::: aside
[amstat.org/asa/files/pdfs/GAISE/GaiseCollege_Full.pdf](https://www.amstat.org/asa/files/pdfs/GAISE/GaiseCollege_Full.pdf)
:::

## 2016 GAISE {.small}

::: columns
::: {.column width="70%"}
1.  Teach [**statistical thinking**]{style="background-color: #b8c8d2;"}.
    -   Teach statistics as an investigative process of problem-solving and decision making.

    -   Give students experience with multivariable thinking \[...\] to answer challenging questions that require them to investigate and explore relationships among many variables.

<!-- -->

2.  Focus on conceptual understanding.
3.  Integrate real data with a context and purpose.
4.  Foster active learning.
5.  Use technology to explore concepts and analyse data.
6.  Use assessments to improve and evaluate student learning.
:::

::: {.column width="30%"}
[NOT a commonly used subset of tests and intervals and produce them with hand calculations]{style="background-color: #b8c8d2;"}
:::
:::

## 2016 GAISE {.small}

::: columns
::: {.column width="70%"}
1.  Teach statistical thinking.
    -   Teach statistics as an investigative process of problem-solving and decision making.

    -   Give students experience with multivariable thinking \[...\] to answer challenging questions that require them to [**investigate and explore relationships among many variables**]{style="background-color: #b8c8d2;"}.

<!-- -->

2.  Focus on conceptual understanding.
3.  Integrate real data with a context and purpose.
4.  Foster active learning.
5.  Use technology to explore concepts and analyse data.
6.  Use assessments to improve and evaluate student learning.
:::

::: {.column width="30%"}
[Multivariate analysis requires the use of computing]{style="background-color: #b8c8d2;"}
:::
:::

## 2016 GAISE {.small}

::: columns
::: {.column width="70%"}
1.  Teach statistical thinking.
    -   Teach statistics as an investigative process of problem-solving and decision making.

    -   Give students experience with multivariable thinking \[...\] to answer challenging questions that require them to investigate and explore relationships among many variables.

<!-- -->

2.  Focus on conceptual understanding.
3.  Integrate real data with a context and purpose.
4.  Foster active learning.
5.  **Use [technology]{style="background-color: #b8c8d2;"}** to explore concepts and analyse data.
6.  Use assessments to improve and evaluate student learning.
:::

::: {.column width="30%"}
[NOT use technology that is only applicable in the intro course or that doesn't follow good science principles]{style="background-color: #b8c8d2;"}
:::
:::

## 2016 GAISE {.small}

::: columns
::: {.column width="70%"}
1.  Teach statistical thinking.
    -   Teach statistics as an investigative process of problem-solving and decision making.

    -   Give students experience with multivariable thinking \[...\] to answer challenging questions that require them to investigate and explore relationships among many variables.

<!-- -->

2.  Focus on conceptual understanding.
3.  Integrate real data with a context and purpose.
4.  Foster active learning.
5.  Use technology to explore concepts and [**analyse data**]{style="background-color: #b8c8d2;"}.
6.  Use assessments to improve and evaluate student learning.
:::

::: {.column width="30%"}
[Data analysis isn't just inference and modelling, it's also data importing, cleaning, preparation, exploration, and visualization]{style="background-color: #b8c8d2;"}
:::
:::

## Design foundation 3: PCMI Curriculum Guidelines {.small}

2017 Park City Math Institute Curriculum Guidelines for Undergraduate Programs in Data Science

> Students will immediately use a high-level language to explore, visualize, and pose questions about data.
> In the second semester, a more algorithmic language may be introduced to help students understand the thinking and structure behind the higher-level functions they experienced in the first semester.

-   Introduction to high-level language
-   Exploring and manipulating data
-   Functions and basic coding
-   Introduction to modeling, both deterministic and stochastic
-   Concepts of projects and code management
-   Databases
-   Introduction to data collection and statistical inference

## Design foundation 3: PCMI Curriculum Guidelines {.small}

2017 Park City Math Institute Curriculum Guidelines for Undergraduate Programs in Data Science

> [Students will immediately use a high-level language to explore, visualize, and pose questions about data.]{style="background-color: #b8c8d2;"}
> In the second semester, a more algorithmic language may be introduced to help students understand the thinking and structure behind the higher-level functions they experienced in the first semester.

-   [Introduction to high-level language]{style="background-color: #b8c8d2;"}
-   [Exploring and manipulating data]{style="background-color: #b8c8d2;"}
-   [Functions and basic coding]{style="background-color: #b8c8d2;"}
-   [Introduction to modeling]{style="background-color: #b8c8d2;"}, both deterministic and stochastic
-   [Concepts of projects and code management]{style="background-color: #b8c8d2;"}
-   Databases
-   [Introduction to data collection and statistical inference]{style="background-color: #b8c8d2;"}

## So, where do we go with all this?

![](images/course-units.png)

## Discussion

::: question
Discuss in pairs:

-   Which components can you see yourself (or do you already) include in an intro data science curriculum?
-   Which components do you have reservations about, and why?
:::

```{r echo=FALSE}
countdown(minutes = 3, font_size = "1.5em")
```

## Which kitchen would you rather bake in?

::: columns
::: {.column width="50%"}
![](images/kitchen-inrepair.png)
:::

::: {.column width="50%"}
![](images/kitchen-built.png)
:::
:::

## Design principle 1: Cherish day one

::: columns
::: {.column width="50%"}
-   Install R
-   Install RStudio
-   Install the following packages:
    -   tidyverse
    -   rmarkdown
    -   ...
-   Load these packages
-   Install git
:::

::: {.column width="50%"}
-   Go to posit.cloud (or some other server based solution)
-   Log in with your ID & pass

```{r hello-R, eval=FALSE}
> hello R!
```
:::
:::

## Your turn: UN Votes

```{=html}
<script src="https://fast.wistia.com/embed/medias/2xell573hf.jsonp" async></script><script src="https://fast.wistia.com/assets/external/E-v1.js" async></script><div class="wistia_responsive_padding" style="padding:58.75% 0 0 0;position:relative;"><div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;"><div class="wistia_embed wistia_async_2xell573hf seo=true videoFoam=true" style="height:100%;position:relative;width:100%"><div class="wistia_swatch" style="height:100%;left:0;opacity:0;overflow:hidden;position:absolute;top:0;transition:opacity 200ms;width:100%;"><img src="https://fast.wistia.com/embed/medias/2xell573hf/swatch" style="filter:blur(5px);height:100%;object-fit:contain;width:100%;" alt="" aria-hidden="true" onload="this.parentNode.style.opacity=1;" /></div></div></div></div>
```
## Your turn: UN Votes

::: cloud
{{< fa cloud >}} Go to [bit.ly/dsbox-cloud](https://bit.ly/dsbox-cloud) to join the Posit Cloud workspace for Data Science in a Box \> Log in \> Join \> Content (top left) \> Start the project titled "AE 01a - UN Votes".
:::

::: appex
Open the Quarto document called `unvotes.qmd`, render the document, view the result.
Then, change "Turkey" to another country, and render again.
:::

::: share
{{< fa user-group >}} Discuss with your neighbor:

-   As a student: Why did you choose the country you chose?
-   As an instructor: What went smoothly in the exercise? What didn't? What would you add to the instructions? What would you take away?
:::

```{r}
#| echo: false

countdown(minutes = 5, font_size = "1.5em")
```

## How do you prefer your cake recipes? Words only, or words & pictures?

::: columns
::: {.column width="50%"}
![](images/recipe-picture.png)
:::

::: {.column width="50%"}
![](images/recipe-words.png)
:::
:::

## Design principle 2: Start with cake

::: columns
::: {.column width="50%"}
-   Open today's demo project
-   Render the document and discuss the visualisation you made with your neighbor
-   Then, change `Turkey` to a different country, and plot again
:::

::: {.column width="50%"}
```{r}
#| label: recipe-words-code

x <- 8
y <- "monkey"
z <- FALSE

class(x)
class(y)
class(z)
```
:::
:::

## Practically speaking...

-   With with great examples, comes a great amount of code...
-   So explicitly encourage students to focus on the task at hand

::: appex
-   Open today's demo project
-   Knit the document and discuss the visualization you made with your neighbor
-   Then, **change `Turkey` to a different country, and plot again**
:::

## Focusing on the task at hand

```{r}
#| label: unvotes-code-1
#| eval: false

un_votes |>
  filter(country %in% c("United States", "Turkey")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(issue = ifelse(issue == "Nuclear weapons and nuclear material",
                        "Nuclear weapons and materials", issue)) |>
  group_by(country, year = year(date), issue) |>
  summarize(
    votes = n(),
    percent_yes = mean(vote == "yes")
    ) |>
  filter(votes > 5) |>
  ggplot(mapping = aes(x = year, y = percent_yes, color = country)) +
    geom_point() +
    geom_smooth(method = "loess", se = FALSE) +
    facet_wrap(~ issue) +
    labs(
      title = "Percentage of Yes votes in the UN General Assembly",
      subtitle = "1946 to 2015",
      y = "% Yes",
      x = "Year",
      color = "Country"
    )
```

## Focusing on the task at hand

```{r}
#| label: unvotes-code-2
#| eval: false
#| code-line-numbers: "2"

un_votes |>
  filter(country %in% c("United States", "Turkey")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  group_by(country, year = year(date), issue) |>
  summarize(
    votes = n(),
    perc_yes = mean(vote == "yes")
    ) |>
  filter(votes > 5) |>
  ggplot(mapping = aes(x = year, y = perc_yes, color = country)) +
    geom_point() +
    geom_smooth(method = "loess", se = FALSE) +
    facet_wrap(~ issue) +
    labs(
      title = "Percentage of Yes votes in the UN General Assembly",
      subtitle = "1946 to 2015",
      y = "% Yes", x = "Year", color = "Country"
    )
```

## Focusing on the task at hand

```{r}
#| label: unvotes-code-3
#| eval: false
#| code-line-numbers: "2"

un_votes |>
  filter(country %in% c("United States", "France")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  group_by(country, year = year(date), issue) |>
  summarize(
    votes = n(),
    perc_yes = mean(vote == "yes")
    ) |>
  filter(votes > 5) |>
  ggplot(mapping = aes(x = year, y = perc_yes, color = country)) +
    geom_point() +
    geom_smooth(method = "loess", se = FALSE) +
    facet_wrap(~ issue) +
    labs(
      title = "Percentage of Yes votes in the UN General Assembly",
      subtitle = "1946 to 2015",
      y = "% Yes", x = "Year", color = "Country"
    )
```

## Which motivates you more to learn how to cook: perfectly chopped onions or ratatouille?

::: columns
::: {.column width="50%"}
![](images/chop-onions.png)
:::

::: {.column width="50%"}
![](images/make-ratatouille.png)
:::
:::

## Design principle 3: Skip baby steps

::: columns
::: {.column width="50%"}
```{r}
#| label: unvotes-univariate
#| echo: false
#| warning: false
#| fig-width: 5

ggplot(un_roll_calls, aes(x = amend)) +
  geom_bar()
```
:::

::: {.column width="50%"}
```{r}
#| label: unvotes-multivariate
#| echo: false
#| fig-width: 5

un_votes |>
  filter(country %in% c("United States")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(
    importantvote = ifelse(importantvote == 0, "No", "Yes"),
    issue = ifelse(issue == "Nuclear weapons and nuclear material", "Nuclear weapons and materials", issue)
    ) |>
  ggplot(aes(y = importantvote, fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN",
    subtitle = "By issue and importance of vote",
    x = "Important vote", y = "", fill = "Vote"
  ) +
  theme_minimal() +
  scale_fill_viridis_d(option = "E")
```
:::
:::

## Practically speaking...

-   Non-trivial examples can be motivating, but need to avoid...

![](images/how-to-draw-an-owl.jpg){fig-align="center"}

. . .

-   Scaffold and layer in between!

## Discussion {.smaller}

::: question
The following code is used to create the multivariate visualisation we saw earlier.
How much of the code would you show/hide when just starting teaching ggplot2?
:::

```{r}
#| label: unvotes-multivariate-code
#| eval: false

un_votes |>
  filter(country %in% c("United States")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(
    importantvote = ifelse(importantvote == 0, "No", "Yes"),
    issue = ifelse(issue == "Nuclear weapons and nuclear material", "Nuclear weapons and materials", issue)
    ) |>
  ggplot(aes(y = importantvote, fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN", 
    subtitle = "By issue and importance of vote",
    x = "Important vote", y = "", fill = "Vote"
    ) +
  theme_minimal() +
  scale_fill_viridis_d(option = "E")
```

```{r}
#| echo: false

countdown(minutes = 5, font_size = "1.5em")
```

## Designing code snippets for teaching

-   Write it out to your heart's desire and polish it

-   Then, split into three parts:

    -   **Pre-process:** Required, but isn't directly connected to / far off from learning goals of current lesson
    -   **Stash:** Not required, and not directly connected to learning goals of current lesson
        -   Likely concepts that fit better into future lessons)
    -   **Feature:** Heart of the lesson (and maybe a review of a previous lessons)

-   Finally, decide on the pace at which to scaffold and layer

## Pre-process

We'll call the highlighted lines `us_votes`

```{r}
#| label: preprocess
#| eval: false
#| code-line-numbers: "1-8"

un_votes |>
  filter(country %in% c("United States")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(
    importantvote = ifelse(importantvote == 0, "No", "Yes"),
    issue = ifelse(issue == "Nuclear weapons and nuclear material", "Nuclear weapons and materials", issue)
    ) |>
  ggplot(aes(y = importantvote, fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN", 
    subtitle = "By issue and importance of vote",
    x = "Important vote", y = "", fill = "Vote"
    ) +
  theme_minimal() +
  scale_fill_viridis_d(option = "E")
```

## Preprocess

```{r}
#| label: preprocess-eval
#| echo: false

us_votes <- un_votes |>
  filter(country %in% c("United States")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(
    importantvote = ifelse(importantvote == 0, "No", "Yes"),
    issue = ifelse(issue == "Nuclear weapons and nuclear material", "Nuclear weapons and materials", issue)
    )
```

```{r}
us_votes
```

## Stash

```{r}
#| label: stash
#| eval: false
#| code-line-numbers: "18-19"

un_votes |>
  filter(country %in% c("United States")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(
    importantvote = ifelse(importantvote == 0, "No", "Yes"),
    issue = ifelse(issue == "Nuclear weapons and nuclear material", "Nuclear weapons and materials", issue)
    ) |>
  ggplot(aes(y = importantvote, fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN", 
    subtitle = "By issue and importance of vote",
    x = "Important vote", y = "", fill = "Vote"
    ) +
  theme_minimal() +
  scale_fill_viridis_d(option = "E")
```

## Feature

```{r}
#| label: feature
#| eval: false

us_votes |>
  ggplot(aes(y = importantvote, fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN", 
    subtitle = "By issue and importance of vote",
    x = "Important vote", y = "", fill = "Vote"
    )
```

## Scaffold 1

```{r}
#| label: scaffold-layer-1
#| output-location: column
#| fig-width: 5

ggplot(data = us_votes)
```

## Scaffold 2

```{r}
#| label: scaffold-layer-2
#| output-location: column
#| code-line-numbers: "2-3"
#| fig-width: 5

ggplot(data = us_votes, 
  mapping = aes(y = importantvote,
                fill = vote))
```

## Scaffold 3

```{r}
#| label: scaffold-layer-3
#| output-location: column
#| code-line-numbers: "4"
#| fig-width: 5

ggplot(data = us_votes, 
  mapping = aes(y = importantvote,
                fill = vote)) +
  geom_bar(position = "fill")
```

## Scaffold 4

```{r}
#| label: scaffold-layer-4
#| output-location: column
#| code-line-numbers: "5"
#| fig-width: 5

ggplot(data = us_votes, 
  mapping = aes(y = importantvote,
                fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1)
```

## Scaffold 5

```{r}
#| label: scaffold-layer-5
#| output-location: column
#| code-line-numbers: "6-11"
#| fig-width: 5

ggplot(data = us_votes, 
  mapping = aes(y = importantvote,
                fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN",
    subtitle = "By issue and importance of vote", 
    x = "Important vote", 
    y = "" 
    ) 
```

## Scaffold 6

```{r}
#| label: scaffold-layer-6
#| output-location: column
#| code-line-numbers: "11"
#| fig-width: 5

ggplot(data = us_votes, 
  mapping = aes(y = importantvote,
                fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN",
    subtitle = "By issue and importance of vote", 
    x = "Important vote", 
    y = "",
    fill = "Vote"
    ) 
```

## ~~Skip~~ Re-insert baby steps

![](images/learnr-visualise.png){fig-align="center" width="1637"}

## Which is more likely to appeal to someone who has never tried broccoli?

::: columns
::: {.column width="50%"}
![](images/broccoli-raw.png)
:::

::: {.column width="50%"}
![](images/broccoli-cooked.png)
:::
:::

## Design principle 4: Hide the veggies

::: columns
::: {.column width="50%"}
Today we're going to do web scraping

-   Using the **rvest** package
-   And with the help of *regular expressions*
:::

::: {.column width="50%"}
-   Today we go from this to that

![](images/open-secrets-nc.png)

-   and do so in a way that is easy to replicate for another state
:::
:::

## Practically speaking...

-   Students will encounter lots of new challenges along the way
-   Let that happen, and then provide a solution

## Start with a mini-lecture

-   **Lesson:** Web scraping essentials for turning a structured table into a data frame in R.

## Follow up with a hands-on exercise

-   **Lesson:** Web scraping essentials for turning a structured table into a data frame in R.
-   **Ex 1:** Scrape the table off the web and save as a data frame.

![](images/open-secrets-nc-ex1.png)

## And a thought exercise

-   **Lesson:** Web scraping essentials for turning a structured table into a data frame in R.
-   **Ex 1:** Scrape the table off the web and save as a data frame.
-   **Ex 2:** What other information do we need represented as variables in the data to obtain the desired facets?

![](images/open-secrets-nc-ex2.png)

## And finally, the veggies!

-   **Lesson:** Web scraping essentials for turning a structured table into a data frame in R.
-   **Ex 1:** Scrape the table off the web and save as a data frame.
-   **Ex 2:** What other information do we need represented as variables in the data to obtain the desired facets?
-   **Lesson:** "Just enough" string parsing and regular expressions to go from

![](images/open-secrets-nc-ex3.png)

## If you are already taking a baking class, which will be easier to venture on to?

::: columns
::: {.column width="50%"}
![](images/make-pastries.png)
:::

::: {.column width="50%"}
![](images/make-tacos.png)
:::
:::

## Design principle 5: Leverage the ecosystem {.smaller}

Estimate the difference between the average evaluation score of male and female faculty.

::: columns
::: {.column width="50%"}
```{r}
evals |>
  specify(score ~ gender) |>
  generate(reps = 100, 
    type = "bootstrap") |>
  calculate(stat = "diff in means", 
    order = c("male", "female")) |>
  summarise(
    l = quantile(stat, 0.025), 
    u = quantile(stat, 0.975)
    )
```
:::

::: {.column width="50%"}
```{r}
t.test(evals$score ~ evals$gender)
```
:::
:::

```{r}
#| include: false

options(
  dplyr.print_min = 6,
  dplyr.print_max = 6
)
```

## infer $\in$ tidymodels

::: columns
::: {.column width="50%"}
The objective of this package is to perform statistical inference using an expressive statistical grammar that coheres with the tidyverse design framework.
:::

::: {.column width="50%"}
![](images/infer-hex.png)
:::
:::

## infer 1

```{r infer-1}
evals |>
  specify(score ~ gender)
```

## infer 2

```{r infer-2}
set.seed(1234)
evals |>
  specify(score ~ gender) |>
  generate(reps = 100, type = "bootstrap")
```

## infer 3

```{r infer-3}
set.seed(1234)
evals |>
  specify(score ~ gender) |>
  generate(reps = 100, type = "bootstrap") |>
  calculate(stat = "diff in means", order = c("male", "female"))
```

## infer 4

```{r}
#| fig-width: 6
#| fig-asp: 0.618

set.seed(1234)
evals |>
  specify(score ~ gender) |>
  generate(reps = 100, type = "bootstrap") |>
  calculate(stat = "diff in means", order = c("male", "female")) |>
  visualise()
```

## infer 4

```{r infer-5}
set.seed(1234)
evals |>
  specify(score ~ gender) |>
  generate(reps = 100, type = "bootstrap") |>
  calculate(stat = "diff in means", order = c("male", "female")) |>
  summarise(l = quantile(stat, 0.025), u = quantile(stat, 0.975))
```

## One other way to "leverage the ecosystem"

Do it all in R!

-   Slides, course, course notes / textbook with **Quarto**
-   A student dashboard with **flexdashboard**
-   Git automation with **ghclass**
-   Interactive tutorials with **learnr**
-   ...

## Overview of principles

🍒 Cherish day one

🍰 Start with cake

🍼 Skip baby steps

🥦 Hide the veggies

🌲 Leverage the ecosystem

# Technology

## Computing - student facing

![](images/tooling/‎tooling.‎001.png){fig-align="center"}

## Computing - instructor facing

![](images/tooling/‎tooling.‎002.png){fig-align="center"}

## Computing - closer to truth...

![](images/tooling/‎tooling.‎003.png){fig-align="center"}

## Version control + hosting

![](images/tooling/‎tooling.‎009.png){fig-align="center"}

## Version control + hosting + collaboration

![](images/tooling/‎tooling.‎010.png){fig-align="center"}

## Bonus: Peer review

![](images/tooling/‎tooling.‎012.png){fig-align="center"}

# Assessing learning

## Pieces of assessment

-   Formative: In-class exercises, interactive tutorials, etc.

-   Summative: Homework assignments, lab assignments, exams, projects, etc.

## Individual vs. team

::: question
-   How do you create a learning environment that is conducive to teamwork?
-   How do you balance learning as a team with learning individually?
:::

# Teaching resources

## LOTS of open teaching materials!

-   The landscape of data science education is evolving, which demands that instructors stay up-to-date, ever-learning

-   The tooling supports and facilitates open sharing

-   The data science education community is generous!

::: callout-tip
## Tip

Look for open course materials and learn about and respect the license.
All the presenters in this room share their materials openly.
:::

## Data Science in a Box

[[datasciencebox.org](https://datasciencebox.org/)]{style="align: center;"}

```{=html}
<iframe src="https://datasciencebox.org/" title="Data Science in a Box" height="500" width="1000"></iframe>
```
